#title card
title_template:
  default:
    action: toggle
  card:
    type: custom:mushroom-template-card
    primary: "[[name]]"
    entity: "[[entity_action]]"
    tap_action:
      action: "[[action]]"
    secondary: >-
      {{ label_entities('lumieres') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}
        Lumières
      /  {{ label_entities('switch') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}
      Prises
    icon: mdi:[[icon]]
    icon_color: >-
      {% if label_entities('lumieres') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count > 0 %}
        orange
      {% endif %}
    badge_icon: >-
      {% set nb = label_entities('presence') 
                  | expand  
                  | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
      {% if nb > 0 %}
        mdi:numeric-{{nb}}
      {% endif %}
    badge_color: >-
      {% set nb = label_entities('presence') 
                  | expand  
                  | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
      {% if nb > 0 %}
        red
      {% endif %}
    card_mod:
      style:
        mushroom-shape-icon$: |
          .shape {
              {% if label_entities('presence') 
                    | expand  
                    | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                    | selectattr ( 'state' , 'eq' , 'on' ) 
                    | map(attribute='entity_id')  
                    | reject('is_hidden_entity')
                    | list | count > 0 %}
              --shape-animation: ping 1.5s infinite;
              {% endif %}

          }
          @keyframes ping {
            0% { box-shadow: 0 0 0 0 rgba(var(--rgb-red), 0.7); }
            100% { box-shadow: 0 0 5px 15px transparent; }
          }
        .: |
          {% set nb_lum_on = label_entities('lumieres') 
                  | expand  
                  | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
          ha-card {
            background: [[bg_color]] !important;
            border: none!important;
            border-radius: 5px !important;
            justify-content: center!important;
            margin-left: 4px!important; margin-right: 4px!important; margin-top: 1px!important; margin-bottom: 1px!important;
            --icon-size: 50px !important;
            --card-primary-font-size: 15px !important;
            --card-secondary-font-size: 10px !important;
          }
          mushroom-shape-icon {
            --shape-color: 
            {% if nb_lum_on == 0 %}
                rgba(255,255,255,0.6) !important;
            {% else %}
                rgba(255,152,0,0.4) !important;
            {% endif %}
            --icon-border-radius: 100%;
          }
          ha-state-icon {
            {% if nb_lum_on > 0 %}
            animation: focus 4s linear infinite alternate;
            {% endif %}
          }
          @keyframes focus {
            50% { filter: blur(10px); }
          }

title_allroom_template:
  default:
    action: toggle
  card:
    type: custom:mushroom-template-card
    primary: "[[name]]"
    entity: "[[entity_action]]"
    tap_action:
      action: "[[action]]"
    secondary: >-
      {{ label_entities('lumieres') 
            | expand  
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}
        Lumières
      /  {{ label_entities('switch') 
            | expand  
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}
      Prises
    icon: mdi:[[icon]]
    icon_color: >-
      {% if label_entities('lumieres') 
            | expand  
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count > 0 %}
        orange
      {% endif %}
    badge_icon: >-
      {% set nb = label_entities('presence') 
                  | expand  
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
      {% if nb > 0 %}
        mdi:numeric-{{nb}}
      {% endif %}
    badge_color: >-
      {% set nb = label_entities('presence') 
                  | expand  
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
      {% if nb > 0 %}
        red
      {% endif %}
    card_mod:
      style:
        mushroom-shape-icon$: |
          .shape {
              {% if label_entities('presence') 
                    | expand  
                    | selectattr ( 'state' , 'eq' , 'on' ) 
                    | map(attribute='entity_id')  
                    | reject('is_hidden_entity')
                    | list | count > 0 %}
              --shape-animation: ping 1.5s infinite;
              {% endif %}

          }
          @keyframes ping {
            0% { box-shadow: 0 0 0 0 rgba(var(--rgb-red), 0.7); }
            100% { box-shadow: 0 0 5px 15px transparent; }
          }
        .: |
          {% set nb_lum_on = label_entities('lumieres') 
                  | expand  
                  | selectattr ( 'state' , 'eq' , 'on' ) 
                  | map(attribute='entity_id')  
                  | reject('is_hidden_entity')
                  | list | count %}
          ha-card {
            background: [[bg_color]] !important;
            border: none!important;
            border-radius: 5px !important;
            justify-content: center!important;
            margin-left: 4px!important; margin-right: 4px!important; margin-top: 1px!important; margin-bottom: 1px!important;
            --icon-size: 50px !important;
            --card-primary-font-size: 15px !important;
            --card-secondary-font-size: 10px !important;
          }
          mushroom-shape-icon {
            --shape-color: 
            {% if nb_lum_on == 0 %}
                rgba(255,255,255,0.6) !important;
            {% else %}
                rgba(255,152,0,0.4) !important;
            {% endif %}
            --icon-border-radius: 100%;
          }
          ha-state-icon {
            {% if nb_lum_on > 0 %}
            animation: focus 4s linear infinite alternate;
            {% endif %}
          }
          @keyframes focus {
            50% { filter: blur(10px); }
          }
# chips card
chips_1_template:
  card:
    type: custom:mushroom-chips-card
    card_mod:
      style: |
        ha-card {
          --chip-box-shadow: none !important;
          --chip-background: none !important;
        }
    chips:
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_temperature]]"
            state_not: "unavailable"
        chip:
          type: template
          content: "{{ states('[[entity_temperature]]') | float(0) | round(0) }}°C"
          icon: mdi:thermometer
          icon_color: |-
            {% if states('[[entity_temperature]]') | float(0) | round(0) < 0 %}
              blue
            {% elif states('[[entity_temperature]]') | float(0) | round(0) < 11 %}
              yellow
            {% elif states('[[entity_temperature]]') | float(0) | round(0) < 17 %}
              orange
            {% elif states('[[entity_temperature]]') | float(0) | round(0) < 24 %}
              green
            {% else %}
              red
            {% endif %}
          entity: "[[entity_temperature]]"
          tap_action:
            action: more-info
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_humidity]]"
            state_not: "unavailable"
        chip:
          type: template
          content: "{{ states('[[entity_humidity]]') | float(0) | round(0) }}%"
          icon: mdi:water-percent
          icon_color: |-
            {% if states('[[entity_humidity]]') | float(0) | round(0) < 40 %}
              yellow
            {% elif states('[[entity_humidity]]') | float(0) | round(0) < 60 %}
              green
            {% else %}
              red
            {% endif %}
          entity: "[[entity_humidity]]"
          tap_action:
            action: more-info
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_lx]]"
            state_not: "unavailable"
        chip:
          type: template
          content: "{{ states('[[entity_lx]]') |float(0) | round(0) }} lx"
          icon: mdi:brightness-5
          icon_color: |-
            {% if states('[[entity_lx]]') |float(0) | round(0) < 40 %}
              black
            {% elif states('[[entity_lx]]') |float(0) | round(0) < 100 %}
              orange
            {% else %}
              yellow
            {% endif %}
          entity: "[[entity_lx]]"
          tap_action:
            action: more-info
      - type: template
        content: >-
          ({{ label_entities('lumieres') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}/{{ label_entities('lumieres') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }})
        icon: mdi:lightbulb-group
        icon_color: >-
          {% if label_entities('lumieres') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count > 0 %}
            orange
          {% else %}
            grey
          {% endif %}
        tap_action:
          action: none
      - type: template
        content: >-
          ({{ label_entities('switch') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }}/{{ label_entities('switch') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count }})
        icon: mdi:power-socket-fr
        icon_color: >-
          {% if label_entities('switch') 
            | expand  
            | selectattr('entity_id', 'in', area_entities("[[room]]")) 
            | selectattr ( 'state' , 'eq' , 'on' ) 
            | map(attribute='entity_id')  
            | reject('is_hidden_entity')
            | list | count  > 0 %}
            orange
          {% else %}
            grey
          {% endif %}
        tap_action:
          action: none
    alignment: start
chips_2_template:
  card:
    type: custom:mushroom-chips-card
    card_mod:
      style: |
        ha-card {
          --chip-box-shadow: none !important;
          --chip-background: none !important;
        }
    chips:
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_show_smoke]]"
            state_not: "unavailable"
        chip:
          type: template
          icon: >-
            {% if label_entities('smoke detector') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('smoke detector') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0 %}
              mdi:smoke-detector-variant-alert
            {% else %}
              mdi:smoke-detector-variant-off
            {% endif %}
          icon_color: >-
            {% if label_entities('smoke detector') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('smoke detector')
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0 %}
              red
            {% else %}
              green
            {% endif %}
          tap_action:
            action: none
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_show_flood]]"
            state_not: "unavailable"
        chip:
          type: template
          icon: >-
            {% if label_entities('flood detector') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('flood detector')
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0 %}
              mdi:water-alert
            {% else %}
              mdi:water-off
            {% endif %}
          icon_color: >-
            {% if label_entities('flood detector') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('flood detector')
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0 %}
              red
            {% else %}
              green
            {% endif %}
          tap_action:
            action: none
      - type: conditional
        conditions:
          - condition: state
            entity: "[[tv_power]]"
            state_not: "unavailable"
        chip:
          type: template
          icon: |-
            {% if label_entities('tv') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('tv') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'ne' , 'unavailable' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
              mdi:television-classic-off
            {% else %}
              mdi:television-classic
            {% endif %}
          icon_color: |-
            {% if label_entities('tv') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
            {% elif label_entities('tv') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'ne' , 'unavailable' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0 %}
              green
            {% else %}
              red
            {% endif %}
          tap_action:
            action: toggle
          entity: "[[tv_power]]"
      - type: conditional
        conditions:
          - condition: state
            entity: "[[entity_show_door]]"
            state_not: "unavailable"
        chip:
          type: template
          icon: >-
            {% if label_entities('porte') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0  %}
            {% elif label_entities('porte') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0  %}
              mdi:door-closed
            {% else %}
              mdi:door-open
            {% endif %}
          icon_color: >-
            {% if label_entities('porte') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0  %}
            {% elif label_entities('porte')                 | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'eq' , 'on' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0  %}
              green
            {% else %}
              red
            {% endif %}
          tap_action:
            action: none
      - type: template
        icon: |-
          {% if label_entities('presence pir') 
              | expand  
              | selectattr('entity_id', 'in', area_entities("[[room]]")) 
              | selectattr ( 'state' , 'eq' , 'on' ) 
              | map(attribute='entity_id')  
              | reject('is_hidden_entity')
              | list | count == 0 %}
            mdi:motion-sensor-off
          {% else %}
            mdi:motion-sensor
          {% endif %}
        icon_color: |-
          {% if label_entities('presence pir') 
              | expand  
              | selectattr('entity_id', 'in', area_entities("[[room]]")) 
              | selectattr ( 'state' , 'eq' , 'on' ) 
              | map(attribute='entity_id')  
              | reject('is_hidden_entity')
              | list | count == 0 %}            
            green
          {% else %}
            red
          {% endif %}
        tap_action:
          action: none
      - type: template
        icon: |-
          {% if label_entities('presence ld2410') 
              | expand  
              | selectattr('entity_id', 'in', area_entities("[[room]]")) 
              | selectattr ( 'state' , 'eq' , 'on' ) 
              | map(attribute='entity_id')  
              | reject('is_hidden_entity')
              | list | count == 0 %}
            mdi:account
          {% else %}
            mdi:account-alert
          {% endif %}
        icon_color: |-
          {% if label_entities('presence ld2410') 
              | expand  
              | selectattr('entity_id', 'in', area_entities("[[room]]")) 
              | selectattr ( 'state' , 'eq' , 'on' ) 
              | map(attribute='entity_id')  
              | reject('is_hidden_entity')
              | list | count == 0 %}            
            green
          {% else %}
            red
          {% endif %}
        tap_action:
          action: none
      - type: conditional
        conditions:
          - condition: state
            entity: "[[camera_stream]]"
            state_not: "unavailable"
        chip:
          type: template
          icon: >-
            {% if label_entities('camera') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0%}
            {% elif label_entities('camera') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'ne' , 'unavailable' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0%}
              mdi:cctv
            {% else %}
              mdi:cctv-off
            {% endif %}
          icon_color: >-
            {% if label_entities('camera') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count == 0%}
            {% elif label_entities('camera') 
                | expand  
                | selectattr('entity_id', 'in', area_entities("[[room]]")) 
                | selectattr ( 'state' , 'ne' , 'unavailable' ) 
                | map(attribute='entity_id')  
                | reject('is_hidden_entity')
                | list | count > 0%}
              red
            {% else %}
              green
            {% endif %}
          tap_action:
            action: more-info
          entity: "[[camera_stream]]"
    alignment: end

#light
light_template:
  default:
    icon: ceiling-light
  card:
    name: "[[name]]"
    type: "custom:mushroom-light-card"
    secondary_info: none
    entity: "[[entity]]"
    icon: "mdi:[[icon]]"
    layout: vertical
    card_mod:
      class:
        - hc_light_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
light_template_full:
  default:
    position: full
  card:
    name: "[[name]]"
    type: "custom:mushroom-light-card"
    secondary_info: none
    entity: "[[entity]]"
    icon_type: none
    layout: vertical
    use_light_color: true
    show_brightness_control: true
    show_color_control: true
    card_mod:
      class:
        - hc_light_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
#switch
switch_template:
  default:
    icon: power-socket-fr
  card:
    type: custom:mushroom-template-card
    primary: "[[name]]"
    secondary: |-
      {% if is_state('[[entity]]', 'on') %}{{ states('[[entity_power]]') }}W{% endif %}
    entity: "[[entity]]"
    icon: mdi:[[icon]]
    icon_color: |-
      {% if is_state('[[entity]]', 'unavailable') %}
        red
      {% elif is_state('[[entity]]', 'on') %}
        orange
      {% endif %}
    layout: horizontal
    fill_container: true
    card_mod:
      class:
        - hc_switch_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
        ha-card {
            {% if states('[[entity_power]]') | float(0) > 500 %}
              animation: borderPulseR 2s ease-out infinite;
            {% elif states('[[entity_power]]') | float(0) > 100 %}
              animation: borderPulseO 2s ease-out infinite;
            {% endif %}
          }
          @keyframes borderPulseO {
            50% {
              box-shadow: 0 0 50px orange;
            }
          }
          @keyframes borderPulseR {
            50% {
              box-shadow: 0 0 50px red;
            }
        }
#button_template
button_template:
  default:
    icon: power-socket-fr
  card:
    type: custom:mushroom-template-card
    primary: "[[name]]"
    entity: "[[entity]]"
    icon: mdi:[[icon]]
    icon_color: |-
      {% if is_state('[[entity]]', 'unavailable') %}
        red
      {% elif is_state('[[entity]]', 'on') %}
        orange
      {% endif %}
    layout: horizontal
    fill_container: true
    card_mod:
      class:
        - hc_switch_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
#remote tv
remote_tv_template:
  default:
    icon: television
  card:
    type: custom:mushroom-template-card
    primary: "[[name]]"
    secondary:
    entity: "[[entity]]"
    icon: mdi:[[icon]]
    icon_color: |-
      {% if is_state('[[entity]]', 'unavailable') %}
        red
      {% elif is_state('[[entity]]', 'on') %}
        orange
      {% endif %}
    layout: horizontal
    fill_container: true
    card_mod:
      class:
        - hc_switch_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }

#freebox button
freebox_button_template:
  default:
    -icon_color: white
  card:
    type: custom:mushroom-template-card
    icon: mdi:[[icon]]
    icon_color: "[[icon_color]]"
    tap_action:
      action: call-service
      service: freebox_player.remote
      service_data:
        code: "[[code]]"
    card_mod:
      class:
        - hc_button_[[position]]
      style: |
        ha-card {
          --icon-size: 70px !important;
        }
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
#lg tv
lg_button_template:
  default:
    -icon_color: white
  card:
    type: custom:mushroom-template-card
    icon: mdi:television-classic
    primary_info: none
    secondary_info: none
    entity: "[[entity]]"
    layout: vertical
    icon_color: |-
      {% if is_state('[[entity]]', 'unavailable') %}
        red
      {% elif is_state('[[entity]]', 'on') %}
        orange
      {% endif %}
    card_mod:
      class:
        - hc_switch_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
    tap_action:
      action: call-service
      service: scene.turn_on
      target:
        entity_id: "[[entity_action]]"
#bare son lg button
lg_barson_button_template:
  default:
    -icon_color: white
  card:
    type: custom:mushroom-template-card
    icon: mdi:[[icon]]
    icon_color: "[[icon_color]]"
    tap_action:
      action: toggle
    entity: "[[entity]]"
    card_mod:
      class:
        - hc_button_[[position]]
      style: |
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
#media player
mediaplayer_button_template:
  default:
  card:
    type: custom:mushroom-media-player-card
    entity: "[[entity]]"
    use_media_info: true
    show_volume_level: false
    media_controls:
      - on_off
      - previous
      - play_pause_stop
      - next
    card_mod:
      style: |
        ha-card {
          background: rgb(38,38,38) !important;
          border: none!important;
          border-radius: 5px !important;
          justify-content: center!important;
          icon-size: 60px !important;
          margin-left: 4px!important; 
          margin-right: 4px!important; 
          margin-top: 2px! important; 
          margin-bottom: 2px!important;
        }
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }

#button with icon
button_icon_template:
  default:
  card:
    type: custom:button-card
    icon: mdi:[[icon]]
    size: 15%
    tap_action:
      action: toggle
    entity: "[[entity]]"
    show_name: false
    card_mod:
      class:
        - hc_switch_[[position]]
      style: |
        ha-card {
          height: 76px;
          width: 97% !important;
        }
        mushroom-shape-icon {
          --shape-outline-color: none!important;
          --shape-color: rgb(38,38,38) !important;
          --shape-color-disabled: rgb(38,38,38) !important;
        }
#button with icon
uptime_card_template:
  default:
  card:
    type: custom:uptime-card
    entity: "[[entity]]"
    icon: mdi:[[icon]]
    ok: up
    ko: down
    ko_icon: mdi:[[icon_ko]]
    hours_to_show: 24
    status_adaptive_color: true
    color:
      icon: white
      title: white
      ok: steelblue
      ko: orangered
    show:
      icon: true
      status: true
      timeline: true
      average: true
    bar: {}
    init: {}
    alias: {}
    tooltip:
      hour24: true
    tap_action: {}
    blink: {}
    title_template: "[[name]]"

########################################
#button with icon
mini_room_card_template:
  default:
  card:
    type: custom:stack-in-card
    mode: vertical
    card_mod:
      class: top-level-card
    cards:
      - type: custom:stack-in-card
        mode: vertical
        card_mod:
          style: |
            ha-card {
              background: [[bg_color]] !important;
              margin: 2px 2px !important;
            }
        cards:
          - type: custom:decluttering-card
            template: title_template
            variables:
              - name: "[[room]]"
              - entity_action: "[[entity_action]]"
              - room: "[[room]]"
              - icon: "[[icon]]"
              - bg_color: "[[bg_color]]"
          - type: custom:stack-in-card
            mode: horizontal
            card_mod:
              style: |
                ha-card {
                  background: [[bg_color]] !important;
                }
            cards:
              - type: custom:decluttering-card
                template: chips_1_template
                variables:
                  - entity_temperature: "[[entity_temperature]]"
                  - entity_humidity: "[[entity_humidity]]"
                  - entity_lx: "[[entity_lx]]"
                  - room: "[[room]]"
          - type: custom:stack-in-card
            mode: horizontal
            card_mod:
              style: |
                ha-card {
                  background: [[bg_color]] !important;
                }
            cards:
              - type: custom:decluttering-card
                template: chips_2_template
                variables:
                  - room: "[[room]]"
                  - tv_power: "[[tv_power]]"
                  - camera_stream: "[[camera_stream]]"
                  - entity_show_smoke: "[[entity_show_smoke]]"
                  - entity_show_flood: "[[entity_show_flood]]"
                  - entity_show_door: "[[entity_show_door]]"
